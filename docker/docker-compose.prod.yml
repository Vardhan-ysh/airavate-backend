version: '3.8'

services:
  # Application service (production)
  app:
    build:
      context: ../
      dockerfile: docker/Dockerfile
      target: production
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://airavate_user:${POSTGRES_PASSWORD}@db:5432/airavate_prod?schema=public
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=7d
      - CORS_ORIGIN=${CORS_ORIGIN}
      - LOG_LEVEL=info
      - BCRYPT_ROUNDS=12
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - airavate-network

  # Database service (production)
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=airavate_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=airavate_prod
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U airavate_user -d airavate_prod']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - airavate-network

  # Redis for caching (production)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data
    networks:
      - airavate-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - airavate-network

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local

networks:
  airavate-network:
    driver: bridge
