openapi: 3.1.0
info:
  title: Airavate Backend API
  description: |
    Scalable production-grade backend API for Airavate project with dual authentication system.
    
    ## Features
    - âœ… Dual Authentication (Email/Password + Google OAuth via Authentik)
    - âœ… User Management with JWT tokens
    - âœ… Comprehensive Health Monitoring
    - âœ… Audit Logging & Winston logging
    - âœ… Rate Limiting & Security Headers
    - âœ… CORS Support & Input Validation
    - âœ… PostgreSQL with Prisma ORM
    - âœ… Docker containerization
    - ðŸ”„ Payment Processing (Razorpay - Coming Soon)
    
    ## Authentication Methods
    
    ### Email/Password Authentication
    1. Register via `/api/v1/auth/register` 
    2. Login via `/api/v1/auth/login` with credentials
    3. Receive JWT token for subsequent requests
    
    ### Google OAuth Authentication
    1. Get OAuth URL from `/api/v1/auth/oauth/google`
    2. User authenticates via Google through Authentik
    3. Callback to `/api/v1/auth/oauth/callback` with authorization code
    4. Exchange code for JWT access token
    5. Use JWT token in `Authorization: Bearer <token>` header
    
    ## Security
    - All authenticated endpoints require valid JWT token
    - Rate limiting applied to all endpoints
    - CORS configured for secure cross-origin requests
    - Security headers enforced via Helmet middleware
    - Password hashing with bcrypt (12 rounds)
    
  version: 3.0.0
  contact:
    name: Airavate Team
    email: admin@airavate.com
    url: https://github.com/airavate/backend
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://staging.airavate.com
    description: Staging server
  - url: https://api.airavate.com
    description: Production server

security:
  - BearerAuth: []
  - {}

paths:
  # Health and Status
  /health:
    get:
      tags:
        - Health
      summary: Comprehensive health check
      description: Returns the health status of the API server and all dependencies
      operationId: getHealth
      security: []
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                uptime: 3600.123
                timestamp: "2025-08-30T15:30:00.000Z"
                status: "OK"
                services:
                  database: "healthy"
                  authentik: "healthy"
                  memory:
                    rss: 52428800
                    heapTotal: 29360128
                    heapUsed: 18235392
                  cpu:
                    user: 123456
                    system: 67890
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /:
    get:
      tags:
        - General
      summary: API root endpoint
      description: Returns basic API information and available endpoints
      operationId: getApiInfo
      security: []
      responses:
        '200':
          description: API information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiInfoResponse'

  /api/v1:
    get:
      tags:
        - General
      summary: API v1 information
      description: Returns information about API v1 endpoints and authentication requirements
      operationId: getApiV1Info
      security: []
      responses:
        '200':
          description: API v1 information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiV1InfoResponse'

  # Authentication Endpoints
  /api/v1/auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user with email/password
      description: |
        Register a new user account using email and password.
        Returns user information and JWT token upon successful registration.
      operationId: registerUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            example:
              email: "user@example.com"
              password: "SecurePassword123!"
              firstName: "John"
              lastName: "Doe"
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        '400':
          description: Invalid input or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/login:
    post:
      tags:
        - Authentication
      summary: Login with email/password
      description: |
        Authenticate user with email and password credentials.
        Returns user information and JWT token upon successful login.
      operationId: loginUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: "user@example.com"
              password: "SecurePassword123!"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/oauth/google:
    get:
      tags:
        - Authentication
      summary: Get Google OAuth authorization URL
      description: |
        Returns the Google OAuth authorization URL for initiating OAuth flow.
        User should be redirected to this URL to authenticate with Google.
      operationId: getGoogleOAuthUrl
      security: []
      responses:
        '200':
          description: OAuth URL generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  authUrl:
                    type: string
                    format: uri
                    description: Google OAuth authorization URL
                    example: "http://localhost:9000/application/o/authorize/?response_type=code&client_id=..."
        '500':
          description: OAuth configuration error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/oauth/callback:
    get:
      tags:
        - Authentication
      summary: OAuth callback endpoint
      description: |
        Handles the OAuth callback from Authentik with authorization code.
        Exchanges code for user information and creates/updates user account.
      operationId: handleOAuthCallback
      security: []
      parameters:
        - name: code
          in: query
          required: true
          description: OAuth authorization code from Authentik
          schema:
            type: string
            example: "auth_code_12345"
        - name: state
          in: query
          required: true
          description: OAuth state parameter for CSRF protection
          schema:
            type: string
            example: "random_state_value"
        - name: error
          in: query
          description: OAuth error parameter if authentication failed
          schema:
            type: string
            example: "access_denied"
      responses:
        '200':
          description: OAuth authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        '400':
          description: Invalid authorization code or state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: |
        Invalidates the current JWT token and optionally redirects to Authentik logout.
        Supports both local token invalidation and global Authentik logout.
      operationId: logout
      security:
        - BearerAuth: []
      parameters:
        - name: global
          in: query
          description: Whether to perform global logout from Authentik
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
                  global:
                    type: boolean
                    description: Whether global logout was performed
                  logout_url:
                    type: string
                    format: uri
                    description: Authentik logout URL (if global logout)
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      description: |
        Refreshes an expired JWT token using the refresh token.
        Returns a new access token if refresh token is valid.
      operationId: refreshToken
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  description: Valid refresh token
                  example: "refresh_token_12345"
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User Management
  /api/v1/users/profile:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Returns the authenticated user's profile information
      operationId: getCurrentUserProfile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Users
      summary: Update user profile
      description: Updates the authenticated user's profile information
      operationId: updateUserProfile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users:
    get:
      tags:
        - Users
      summary: List users (Admin only)
      description: Returns paginated list of users (admin access required)
      operationId: listUsers
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (1-based)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of users per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: Search term for email or name
          schema:
            type: string
            example: "john"
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/{userId}:
    get:
      tags:
        - Users
      summary: Get user by ID (Admin only)
      description: Returns user information by ID (admin access required)
      operationId: getUserById
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: "clm7k8x9y0000123456789"
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from OAuth2 authentication flow

  schemas:
    # Health and Status Schemas
    HealthResponse:
      type: object
      properties:
        uptime:
          type: number
          description: Server uptime in seconds
          example: 3600.123
        timestamp:
          type: string
          format: date-time
          description: Current server timestamp
        status:
          type: string
          enum: [OK, ERROR]
          description: Overall health status
        services:
          type: object
          properties:
            database:
              type: string
              enum: [healthy, unhealthy, unknown]
              description: Database connection status
            authentik:
              type: string
              enum: [healthy, unhealthy, unknown]
              description: Authentik service status
            memory:
              type: object
              properties:
                rss:
                  type: integer
                  description: Resident Set Size
                heapTotal:
                  type: integer
                  description: Total heap size
                heapUsed:
                  type: integer
                  description: Used heap size
            cpu:
              type: object
              properties:
                user:
                  type: integer
                  description: User CPU time
                system:
                  type: integer
                  description: System CPU time
      required:
        - uptime
        - timestamp
        - status
        - services

    ApiInfoResponse:
      type: object
      properties:
        message:
          type: string
          example: "Welcome to Airavate Backend API"
        version:
          type: string
          example: "2.0.0"
        documentation:
          type: string
          example: "/docs"
        endpoints:
          type: object
          properties:
            health:
              type: string
              example: "/health"
            api:
              type: string
              example: "/api/v1"
            docs:
              type: string
              example: "/docs"

    ApiV1InfoResponse:
      type: object
      properties:
        message:
          type: string
          example: "Airavate Backend API v1"
        version:
          type: string
          example: "2.0.0"
        authentication:
          type: object
          properties:
            type:
              type: string
              example: "OAuth2/OpenID Connect (Authentik)"
            endpoints:
              type: object
              properties:
                login:
                  type: string
                  example: "/api/v1/auth/login"
                callback:
                  type: string
                  example: "/api/v1/auth/callback"
                logout:
                  type: string
                  example: "/api/v1/auth/logout"
                refresh:
                  type: string
                  example: "/api/v1/auth/refresh"
        endpoints:
          type: object
          properties:
            users:
              type: string
              example: "/api/v1/users"
            profile:
              type: string
              example: "/api/v1/users/profile"
        documentation:
          type: string
          example: "/docs"

    # Authentication Schemas
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        password:
          type: string
          format: password
          description: User's password (minimum 8 characters)
          example: "SecurePassword123!"
        firstName:
          type: string
          description: User's first name
          example: "John"
        lastName:
          type: string
          description: User's last name
          example: "Doe"
      required:
        - email
        - password
        - firstName
        - lastName

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        password:
          type: string
          format: password
          description: User's password
          example: "SecurePassword123!"
      required:
        - email
        - password

    AuthSuccessResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserProfile'
        token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      required:
        - user
        - token

    # User Schemas
    UserProfile:
      type: object
      properties:
        id:
          type: string
          description: Unique user identifier
          example: "clm7k8x9y0000123456789"
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        firstName:
          type: string
          description: User's first name
          example: "John"
        lastName:
          type: string
          description: User's last name
          example: "Doe"
        picture:
          type: string
          format: uri
          description: URL to user's profile picture
          example: "https://example.com/avatar.jpg"
        provider:
          type: string
          description: Authentication provider used
          enum: ["email", "google"]
          example: "email"
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2025-08-31T10:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-08-31T10:30:00.000Z"
      required:
        - id
        - email
        - firstName
        - lastName
        - provider
        - createdAt
        - updatedAt

    UserProfileUpdate:
      type: object
      properties:
        name:
          type: string
          description: User's full name
          example: "John Doe"
        preferred_username:
          type: string
          description: User's preferred username
          example: "johndoe"
        given_name:
          type: string
          description: User's first name
          example: "John"
        family_name:
          type: string
          description: User's last name
          example: "Doe"
        locale:
          type: string
          description: User's locale preference
          example: "en-US"
      additionalProperties: false

    UserListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserProfile'
        pagination:
          type: object
          properties:
            page:
              type: integer
              minimum: 1
              description: Current page number
              example: 1
            limit:
              type: integer
              minimum: 1
              maximum: 100
              description: Number of items per page
              example: 20
            total:
              type: integer
              minimum: 0
              description: Total number of users
              example: 150
            pages:
              type: integer
              minimum: 0
              description: Total number of pages
              example: 8
            has_next:
              type: boolean
              description: Whether there are more pages
              example: true
            has_prev:
              type: boolean
              description: Whether there are previous pages
              example: false
      required:
        - users
        - pagination

    # Error Schemas
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error type or code
          example: "AUTHENTICATION_FAILED"
        message:
          type: string
          description: Human-readable error message
          example: "Invalid or expired token"
        details:
          type: object
          description: Additional error details
          additionalProperties: true
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
        path:
          type: string
          description: Request path that caused the error
          example: "/api/v1/users/profile"
        request_id:
          type: string
          description: Unique request identifier for debugging
          example: "req_12345"
      required:
        - error
        - message
        - timestamp

tags:
  - name: Health
    description: Health check and monitoring endpoints
  - name: General
    description: General API information and documentation endpoints
  - name: Authentication
    description: OAuth2/OpenID Connect authentication with Authentik
  - name: Users
    description: User management and profile endpoints

externalDocs:
  description: Find more info about Airavate Backend
  url: https://github.com/airavate/backend
